fun main() {
    print("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤: ")
    val employeeCount = readln().toIntOrNull() ?: 0

    val bonuses = mutableListOf<Pair<String, Double>>()

    for (i in 1..employeeCount) {
        println("–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ ‚Ññ$i")

        // –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
        print("–Ü–º‚Äô—è: ")
        val inputName = readlnOrNull()
        val name = inputName?.takeIf { it.isNotBlank() } ?: "Unknown"

        // –í–≤–µ–¥–µ–Ω–Ω—è –æ–∫–ª–∞–¥—É
        val salary: Double = run {
            var result: Double? = null
            while (result == null) {
                try {
                    print("–û–∫–ª–∞–¥: ")
                    val value = readln().toDouble()
                    if (value < 0) throw IllegalArgumentException("–û–∫–ª–∞–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º.")
                    result = value
                } catch (e: NumberFormatException) {
                    println("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ.")
                } catch (e: IllegalArgumentException) {
                    println("–ü–æ–º–∏–ª–∫–∞: ${e.message}")
                }
            }
            result
        }

        // –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –±–æ–Ω—É—Å—É
        val bonusRate: Double = run {
            var result: Double? = null
            while (result == null) {
                try {
                    print("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –±–æ–Ω—É—Å—É (0.1 - 2.0): ")
                    val value = readln().toDouble()
                    if (value !in 0.1..2.0) throw IllegalArgumentException("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 0.1‚Äì2.0.")
                    result = value
                } catch (e: NumberFormatException) {
                    println("–ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ.")
                } catch (e: IllegalArgumentException) {
                    println("–ü–æ–º–∏–ª–∫–∞: ${e.message}")
                }
            }
            result
        }

        val bonus = salary * bonusRate
        bonuses.add(name to bonus)
    }

    // –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    val maxBonus = bonuses.maxByOrNull { it.second }
    val totalBonus = bonuses.sumOf { it.second }
    val excellentCount = bonuses.count { it.second >= 10000 }

    // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    println("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:")
    println("–ù–∞–π–±—ñ–ª—å—à–∏–π –±–æ–Ω—É—Å –æ—Ç—Ä–∏–º–∞—î: ${maxBonus?.first} ‚Äî %.2f".format(maxBonus?.second ?: 0.0))
    println("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–æ–Ω—É—Å—ñ–≤: %.2f".format(totalBonus))
    println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–º—ñ–Ω–Ω–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ (–±–æ–Ω—É—Å ‚â• 10 000): $excellentCount")
}
